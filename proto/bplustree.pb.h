// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bplustree.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bplustree_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bplustree_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bplustree_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bplustree_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bplustree_2eproto;
namespace bplustree {
class BNode;
class BNodeDefaultTypeInternal;
extern BNodeDefaultTypeInternal _BNode_default_instance_;
class BPlusTree;
class BPlusTreeDefaultTypeInternal;
extern BPlusTreeDefaultTypeInternal _BPlusTree_default_instance_;
}  // namespace bplustree
PROTOBUF_NAMESPACE_OPEN
template<> ::bplustree::BNode* Arena::CreateMaybeMessage<::bplustree::BNode>(Arena*);
template<> ::bplustree::BPlusTree* Arena::CreateMaybeMessage<::bplustree::BPlusTree>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bplustree {

// ===================================================================

class BPlusTree PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bplustree.BPlusTree) */ {
 public:
  inline BPlusTree() : BPlusTree(nullptr) {};
  virtual ~BPlusTree();

  BPlusTree(const BPlusTree& from);
  BPlusTree(BPlusTree&& from) noexcept
    : BPlusTree() {
    *this = ::std::move(from);
  }

  inline BPlusTree& operator=(const BPlusTree& from) {
    CopyFrom(from);
    return *this;
  }
  inline BPlusTree& operator=(BPlusTree&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BPlusTree& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BPlusTree* internal_default_instance() {
    return reinterpret_cast<const BPlusTree*>(
               &_BPlusTree_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BPlusTree& a, BPlusTree& b) {
    a.Swap(&b);
  }
  inline void Swap(BPlusTree* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BPlusTree* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BPlusTree* New() const final {
    return CreateMaybeMessage<BPlusTree>(nullptr);
  }

  BPlusTree* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BPlusTree>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BPlusTree& from);
  void MergeFrom(const BPlusTree& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BPlusTree* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bplustree.BPlusTree";
  }
  protected:
  explicit BPlusTree(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bplustree_2eproto);
    return ::descriptor_table_bplustree_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kRootFieldNumber = 3,
    kHeadFieldNumber = 4,
    kMAXSIZEFieldNumber = 1,
  };
  // string _name = 2;
  bool has__name() const;
  private:
  bool _internal_has__name() const;
  public:
  void clear__name();
  const std::string& _name() const;
  void set__name(const std::string& value);
  void set__name(std::string&& value);
  void set__name(const char* value);
  void set__name(const char* value, size_t size);
  std::string* mutable__name();
  std::string* release__name();
  void set_allocated__name(std::string* _name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release__name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated__name(
      std::string* _name);
  private:
  const std::string& _internal__name() const;
  void _internal_set__name(const std::string& value);
  std::string* _internal_mutable__name();
  public:

  // string _root = 3;
  bool has__root() const;
  private:
  bool _internal_has__root() const;
  public:
  void clear__root();
  const std::string& _root() const;
  void set__root(const std::string& value);
  void set__root(std::string&& value);
  void set__root(const char* value);
  void set__root(const char* value, size_t size);
  std::string* mutable__root();
  std::string* release__root();
  void set_allocated__root(std::string* _root);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release__root();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated__root(
      std::string* _root);
  private:
  const std::string& _internal__root() const;
  void _internal_set__root(const std::string& value);
  std::string* _internal_mutable__root();
  public:

  // string _head = 4;
  bool has__head() const;
  private:
  bool _internal_has__head() const;
  public:
  void clear__head();
  const std::string& _head() const;
  void set__head(const std::string& value);
  void set__head(std::string&& value);
  void set__head(const char* value);
  void set__head(const char* value, size_t size);
  std::string* mutable__head();
  std::string* release__head();
  void set_allocated__head(std::string* _head);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release__head();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated__head(
      std::string* _head);
  private:
  const std::string& _internal__head() const;
  void _internal_set__head(const std::string& value);
  std::string* _internal_mutable__head();
  public:

  // uint64 _MAX_SIZE = 1;
  bool has__max_size() const;
  private:
  bool _internal_has__max_size() const;
  public:
  void clear__max_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 _max_size() const;
  void set__max_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal__max_size() const;
  void _internal_set__max_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bplustree.BPlusTree)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr _name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr _root_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr _head_;
  ::PROTOBUF_NAMESPACE_ID::uint64 _max_size_;
  friend struct ::TableStruct_bplustree_2eproto;
};
// -------------------------------------------------------------------

class BNode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bplustree.BNode) */ {
 public:
  inline BNode() : BNode(nullptr) {};
  virtual ~BNode();

  BNode(const BNode& from);
  BNode(BNode&& from) noexcept
    : BNode() {
    *this = ::std::move(from);
  }

  inline BNode& operator=(const BNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline BNode& operator=(BNode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BNode* internal_default_instance() {
    return reinterpret_cast<const BNode*>(
               &_BNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BNode& a, BNode& b) {
    a.Swap(&b);
  }
  inline void Swap(BNode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BNode* New() const final {
    return CreateMaybeMessage<BNode>(nullptr);
  }

  BNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BNode& from);
  void MergeFrom(const BNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bplustree.BNode";
  }
  protected:
  explicit BNode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bplustree_2eproto);
    return ::descriptor_table_bplustree_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 6,
    kValueFieldNumber = 7,
    kChildFieldNumber = 8,
    kPrevFieldNumber = 3,
    kNextFieldNumber = 4,
    kUuidFieldNumber = 5,
    kKeyNumFieldNumber = 2,
    kIsLeafFieldNumber = 1,
  };
  // repeated int32 _key = 6;
  int _key_size() const;
  private:
  int _internal__key_size() const;
  public:
  void clear__key();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal__key(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal__key() const;
  void _internal_add__key(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable__key();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 _key(int index) const;
  void set__key(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add__key(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _key() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable__key();

  // repeated uint64 _value = 7;
  int _value_size() const;
  private:
  int _internal__value_size() const;
  public:
  void clear__value();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal__value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal__value() const;
  void _internal_add__value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable__value();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 _value(int index) const;
  void set__value(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add__value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable__value();

  // repeated string _child = 8;
  int _child_size() const;
  private:
  int _internal__child_size() const;
  public:
  void clear__child();
  const std::string& _child(int index) const;
  std::string* mutable__child(int index);
  void set__child(int index, const std::string& value);
  void set__child(int index, std::string&& value);
  void set__child(int index, const char* value);
  void set__child(int index, const char* value, size_t size);
  std::string* add__child();
  void add__child(const std::string& value);
  void add__child(std::string&& value);
  void add__child(const char* value);
  void add__child(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _child() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable__child();
  private:
  const std::string& _internal__child(int index) const;
  std::string* _internal_add__child();
  public:

  // string _prev = 3;
  bool has__prev() const;
  private:
  bool _internal_has__prev() const;
  public:
  void clear__prev();
  const std::string& _prev() const;
  void set__prev(const std::string& value);
  void set__prev(std::string&& value);
  void set__prev(const char* value);
  void set__prev(const char* value, size_t size);
  std::string* mutable__prev();
  std::string* release__prev();
  void set_allocated__prev(std::string* _prev);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release__prev();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated__prev(
      std::string* _prev);
  private:
  const std::string& _internal__prev() const;
  void _internal_set__prev(const std::string& value);
  std::string* _internal_mutable__prev();
  public:

  // string _next = 4;
  bool has__next() const;
  private:
  bool _internal_has__next() const;
  public:
  void clear__next();
  const std::string& _next() const;
  void set__next(const std::string& value);
  void set__next(std::string&& value);
  void set__next(const char* value);
  void set__next(const char* value, size_t size);
  std::string* mutable__next();
  std::string* release__next();
  void set_allocated__next(std::string* _next);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release__next();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated__next(
      std::string* _next);
  private:
  const std::string& _internal__next() const;
  void _internal_set__next(const std::string& value);
  std::string* _internal_mutable__next();
  public:

  // string _uuid = 5;
  bool has__uuid() const;
  private:
  bool _internal_has__uuid() const;
  public:
  void clear__uuid();
  const std::string& _uuid() const;
  void set__uuid(const std::string& value);
  void set__uuid(std::string&& value);
  void set__uuid(const char* value);
  void set__uuid(const char* value, size_t size);
  std::string* mutable__uuid();
  std::string* release__uuid();
  void set_allocated__uuid(std::string* _uuid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release__uuid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated__uuid(
      std::string* _uuid);
  private:
  const std::string& _internal__uuid() const;
  void _internal_set__uuid(const std::string& value);
  std::string* _internal_mutable__uuid();
  public:

  // uint64 _keyNum = 2;
  bool has__keynum() const;
  private:
  bool _internal_has__keynum() const;
  public:
  void clear__keynum();
  ::PROTOBUF_NAMESPACE_ID::uint64 _keynum() const;
  void set__keynum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal__keynum() const;
  void _internal_set__keynum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool _isLeaf = 1;
  bool has__isleaf() const;
  private:
  bool _internal_has__isleaf() const;
  public:
  void clear__isleaf();
  bool _isleaf() const;
  void set__isleaf(bool value);
  private:
  bool _internal__isleaf() const;
  void _internal_set__isleaf(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bplustree.BNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > _key_;
  mutable std::atomic<int> __key_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > _value_;
  mutable std::atomic<int> __value_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> _child_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr _prev_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr _next_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr _uuid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 _keynum_;
  bool _isleaf_;
  friend struct ::TableStruct_bplustree_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BPlusTree

// uint64 _MAX_SIZE = 1;
inline bool BPlusTree::_internal_has__max_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BPlusTree::has__max_size() const {
  return _internal_has__max_size();
}
inline void BPlusTree::clear__max_size() {
  _max_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BPlusTree::_internal__max_size() const {
  return _max_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BPlusTree::_max_size() const {
  // @@protoc_insertion_point(field_get:bplustree.BPlusTree._MAX_SIZE)
  return _internal__max_size();
}
inline void BPlusTree::_internal_set__max_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  _max_size_ = value;
}
inline void BPlusTree::set__max_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set__max_size(value);
  // @@protoc_insertion_point(field_set:bplustree.BPlusTree._MAX_SIZE)
}

// string _name = 2;
inline bool BPlusTree::_internal_has__name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BPlusTree::has__name() const {
  return _internal_has__name();
}
inline void BPlusTree::clear__name() {
  _name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BPlusTree::_name() const {
  // @@protoc_insertion_point(field_get:bplustree.BPlusTree._name)
  return _internal__name();
}
inline void BPlusTree::set__name(const std::string& value) {
  _internal_set__name(value);
  // @@protoc_insertion_point(field_set:bplustree.BPlusTree._name)
}
inline std::string* BPlusTree::mutable__name() {
  // @@protoc_insertion_point(field_mutable:bplustree.BPlusTree._name)
  return _internal_mutable__name();
}
inline const std::string& BPlusTree::_internal__name() const {
  return _name_.Get();
}
inline void BPlusTree::_internal_set__name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  _name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BPlusTree::set__name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  _name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bplustree.BPlusTree._name)
}
inline void BPlusTree::set__name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  _name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bplustree.BPlusTree._name)
}
inline void BPlusTree::set__name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  _name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bplustree.BPlusTree._name)
}
inline std::string* BPlusTree::_internal_mutable__name() {
  _has_bits_[0] |= 0x00000001u;
  return _name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BPlusTree::release__name() {
  // @@protoc_insertion_point(field_release:bplustree.BPlusTree._name)
  if (!_internal_has__name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return _name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BPlusTree::set_allocated__name(std::string* _name) {
  if (_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  _name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), _name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bplustree.BPlusTree._name)
}
inline std::string* BPlusTree::unsafe_arena_release__name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bplustree.BPlusTree._name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return _name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BPlusTree::unsafe_arena_set_allocated__name(
    std::string* _name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  _name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      _name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bplustree.BPlusTree._name)
}

// string _root = 3;
inline bool BPlusTree::_internal_has__root() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BPlusTree::has__root() const {
  return _internal_has__root();
}
inline void BPlusTree::clear__root() {
  _root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BPlusTree::_root() const {
  // @@protoc_insertion_point(field_get:bplustree.BPlusTree._root)
  return _internal__root();
}
inline void BPlusTree::set__root(const std::string& value) {
  _internal_set__root(value);
  // @@protoc_insertion_point(field_set:bplustree.BPlusTree._root)
}
inline std::string* BPlusTree::mutable__root() {
  // @@protoc_insertion_point(field_mutable:bplustree.BPlusTree._root)
  return _internal_mutable__root();
}
inline const std::string& BPlusTree::_internal__root() const {
  return _root_.Get();
}
inline void BPlusTree::_internal_set__root(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  _root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BPlusTree::set__root(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  _root_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bplustree.BPlusTree._root)
}
inline void BPlusTree::set__root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  _root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bplustree.BPlusTree._root)
}
inline void BPlusTree::set__root(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  _root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bplustree.BPlusTree._root)
}
inline std::string* BPlusTree::_internal_mutable__root() {
  _has_bits_[0] |= 0x00000002u;
  return _root_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BPlusTree::release__root() {
  // @@protoc_insertion_point(field_release:bplustree.BPlusTree._root)
  if (!_internal_has__root()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return _root_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BPlusTree::set_allocated__root(std::string* _root) {
  if (_root != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  _root_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), _root,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bplustree.BPlusTree._root)
}
inline std::string* BPlusTree::unsafe_arena_release__root() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bplustree.BPlusTree._root)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return _root_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BPlusTree::unsafe_arena_set_allocated__root(
    std::string* _root) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_root != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  _root_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      _root, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bplustree.BPlusTree._root)
}

// string _head = 4;
inline bool BPlusTree::_internal_has__head() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BPlusTree::has__head() const {
  return _internal_has__head();
}
inline void BPlusTree::clear__head() {
  _head_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& BPlusTree::_head() const {
  // @@protoc_insertion_point(field_get:bplustree.BPlusTree._head)
  return _internal__head();
}
inline void BPlusTree::set__head(const std::string& value) {
  _internal_set__head(value);
  // @@protoc_insertion_point(field_set:bplustree.BPlusTree._head)
}
inline std::string* BPlusTree::mutable__head() {
  // @@protoc_insertion_point(field_mutable:bplustree.BPlusTree._head)
  return _internal_mutable__head();
}
inline const std::string& BPlusTree::_internal__head() const {
  return _head_.Get();
}
inline void BPlusTree::_internal_set__head(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  _head_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BPlusTree::set__head(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  _head_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bplustree.BPlusTree._head)
}
inline void BPlusTree::set__head(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  _head_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bplustree.BPlusTree._head)
}
inline void BPlusTree::set__head(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  _head_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bplustree.BPlusTree._head)
}
inline std::string* BPlusTree::_internal_mutable__head() {
  _has_bits_[0] |= 0x00000004u;
  return _head_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BPlusTree::release__head() {
  // @@protoc_insertion_point(field_release:bplustree.BPlusTree._head)
  if (!_internal_has__head()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return _head_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BPlusTree::set_allocated__head(std::string* _head) {
  if (_head != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  _head_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), _head,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bplustree.BPlusTree._head)
}
inline std::string* BPlusTree::unsafe_arena_release__head() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bplustree.BPlusTree._head)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return _head_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BPlusTree::unsafe_arena_set_allocated__head(
    std::string* _head) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_head != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  _head_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      _head, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bplustree.BPlusTree._head)
}

// -------------------------------------------------------------------

// BNode

// bool _isLeaf = 1;
inline bool BNode::_internal_has__isleaf() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BNode::has__isleaf() const {
  return _internal_has__isleaf();
}
inline void BNode::clear__isleaf() {
  _isleaf_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool BNode::_internal__isleaf() const {
  return _isleaf_;
}
inline bool BNode::_isleaf() const {
  // @@protoc_insertion_point(field_get:bplustree.BNode._isLeaf)
  return _internal__isleaf();
}
inline void BNode::_internal_set__isleaf(bool value) {
  _has_bits_[0] |= 0x00000010u;
  _isleaf_ = value;
}
inline void BNode::set__isleaf(bool value) {
  _internal_set__isleaf(value);
  // @@protoc_insertion_point(field_set:bplustree.BNode._isLeaf)
}

// uint64 _keyNum = 2;
inline bool BNode::_internal_has__keynum() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BNode::has__keynum() const {
  return _internal_has__keynum();
}
inline void BNode::clear__keynum() {
  _keynum_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BNode::_internal__keynum() const {
  return _keynum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BNode::_keynum() const {
  // @@protoc_insertion_point(field_get:bplustree.BNode._keyNum)
  return _internal__keynum();
}
inline void BNode::_internal_set__keynum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  _keynum_ = value;
}
inline void BNode::set__keynum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set__keynum(value);
  // @@protoc_insertion_point(field_set:bplustree.BNode._keyNum)
}

// string _prev = 3;
inline bool BNode::_internal_has__prev() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BNode::has__prev() const {
  return _internal_has__prev();
}
inline void BNode::clear__prev() {
  _prev_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BNode::_prev() const {
  // @@protoc_insertion_point(field_get:bplustree.BNode._prev)
  return _internal__prev();
}
inline void BNode::set__prev(const std::string& value) {
  _internal_set__prev(value);
  // @@protoc_insertion_point(field_set:bplustree.BNode._prev)
}
inline std::string* BNode::mutable__prev() {
  // @@protoc_insertion_point(field_mutable:bplustree.BNode._prev)
  return _internal_mutable__prev();
}
inline const std::string& BNode::_internal__prev() const {
  return _prev_.Get();
}
inline void BNode::_internal_set__prev(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  _prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BNode::set__prev(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  _prev_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bplustree.BNode._prev)
}
inline void BNode::set__prev(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  _prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bplustree.BNode._prev)
}
inline void BNode::set__prev(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  _prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bplustree.BNode._prev)
}
inline std::string* BNode::_internal_mutable__prev() {
  _has_bits_[0] |= 0x00000001u;
  return _prev_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BNode::release__prev() {
  // @@protoc_insertion_point(field_release:bplustree.BNode._prev)
  if (!_internal_has__prev()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return _prev_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BNode::set_allocated__prev(std::string* _prev) {
  if (_prev != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  _prev_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), _prev,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bplustree.BNode._prev)
}
inline std::string* BNode::unsafe_arena_release__prev() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bplustree.BNode._prev)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return _prev_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BNode::unsafe_arena_set_allocated__prev(
    std::string* _prev) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_prev != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  _prev_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      _prev, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bplustree.BNode._prev)
}

// string _next = 4;
inline bool BNode::_internal_has__next() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BNode::has__next() const {
  return _internal_has__next();
}
inline void BNode::clear__next() {
  _next_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BNode::_next() const {
  // @@protoc_insertion_point(field_get:bplustree.BNode._next)
  return _internal__next();
}
inline void BNode::set__next(const std::string& value) {
  _internal_set__next(value);
  // @@protoc_insertion_point(field_set:bplustree.BNode._next)
}
inline std::string* BNode::mutable__next() {
  // @@protoc_insertion_point(field_mutable:bplustree.BNode._next)
  return _internal_mutable__next();
}
inline const std::string& BNode::_internal__next() const {
  return _next_.Get();
}
inline void BNode::_internal_set__next(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  _next_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BNode::set__next(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  _next_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bplustree.BNode._next)
}
inline void BNode::set__next(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  _next_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bplustree.BNode._next)
}
inline void BNode::set__next(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  _next_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bplustree.BNode._next)
}
inline std::string* BNode::_internal_mutable__next() {
  _has_bits_[0] |= 0x00000002u;
  return _next_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BNode::release__next() {
  // @@protoc_insertion_point(field_release:bplustree.BNode._next)
  if (!_internal_has__next()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return _next_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BNode::set_allocated__next(std::string* _next) {
  if (_next != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  _next_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), _next,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bplustree.BNode._next)
}
inline std::string* BNode::unsafe_arena_release__next() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bplustree.BNode._next)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return _next_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BNode::unsafe_arena_set_allocated__next(
    std::string* _next) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_next != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  _next_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      _next, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bplustree.BNode._next)
}

// string _uuid = 5;
inline bool BNode::_internal_has__uuid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BNode::has__uuid() const {
  return _internal_has__uuid();
}
inline void BNode::clear__uuid() {
  _uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& BNode::_uuid() const {
  // @@protoc_insertion_point(field_get:bplustree.BNode._uuid)
  return _internal__uuid();
}
inline void BNode::set__uuid(const std::string& value) {
  _internal_set__uuid(value);
  // @@protoc_insertion_point(field_set:bplustree.BNode._uuid)
}
inline std::string* BNode::mutable__uuid() {
  // @@protoc_insertion_point(field_mutable:bplustree.BNode._uuid)
  return _internal_mutable__uuid();
}
inline const std::string& BNode::_internal__uuid() const {
  return _uuid_.Get();
}
inline void BNode::_internal_set__uuid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  _uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BNode::set__uuid(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  _uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bplustree.BNode._uuid)
}
inline void BNode::set__uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  _uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bplustree.BNode._uuid)
}
inline void BNode::set__uuid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  _uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bplustree.BNode._uuid)
}
inline std::string* BNode::_internal_mutable__uuid() {
  _has_bits_[0] |= 0x00000004u;
  return _uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BNode::release__uuid() {
  // @@protoc_insertion_point(field_release:bplustree.BNode._uuid)
  if (!_internal_has__uuid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return _uuid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BNode::set_allocated__uuid(std::string* _uuid) {
  if (_uuid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  _uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), _uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bplustree.BNode._uuid)
}
inline std::string* BNode::unsafe_arena_release__uuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bplustree.BNode._uuid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return _uuid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BNode::unsafe_arena_set_allocated__uuid(
    std::string* _uuid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_uuid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  _uuid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      _uuid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bplustree.BNode._uuid)
}

// repeated int32 _key = 6;
inline int BNode::_internal__key_size() const {
  return _key_.size();
}
inline int BNode::_key_size() const {
  return _internal__key_size();
}
inline void BNode::clear__key() {
  _key_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BNode::_internal__key(int index) const {
  return _key_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BNode::_key(int index) const {
  // @@protoc_insertion_point(field_get:bplustree.BNode._key)
  return _internal__key(index);
}
inline void BNode::set__key(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  _key_.Set(index, value);
  // @@protoc_insertion_point(field_set:bplustree.BNode._key)
}
inline void BNode::_internal_add__key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _key_.Add(value);
}
inline void BNode::add__key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add__key(value);
  // @@protoc_insertion_point(field_add:bplustree.BNode._key)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BNode::_internal__key() const {
  return _key_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BNode::_key() const {
  // @@protoc_insertion_point(field_list:bplustree.BNode._key)
  return _internal__key();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BNode::_internal_mutable__key() {
  return &_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BNode::mutable__key() {
  // @@protoc_insertion_point(field_mutable_list:bplustree.BNode._key)
  return _internal_mutable__key();
}

// repeated uint64 _value = 7;
inline int BNode::_internal__value_size() const {
  return _value_.size();
}
inline int BNode::_value_size() const {
  return _internal__value_size();
}
inline void BNode::clear__value() {
  _value_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BNode::_internal__value(int index) const {
  return _value_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BNode::_value(int index) const {
  // @@protoc_insertion_point(field_get:bplustree.BNode._value)
  return _internal__value(index);
}
inline void BNode::set__value(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _value_.Set(index, value);
  // @@protoc_insertion_point(field_set:bplustree.BNode._value)
}
inline void BNode::_internal_add__value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _value_.Add(value);
}
inline void BNode::add__value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add__value(value);
  // @@protoc_insertion_point(field_add:bplustree.BNode._value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
BNode::_internal__value() const {
  return _value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
BNode::_value() const {
  // @@protoc_insertion_point(field_list:bplustree.BNode._value)
  return _internal__value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
BNode::_internal_mutable__value() {
  return &_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
BNode::mutable__value() {
  // @@protoc_insertion_point(field_mutable_list:bplustree.BNode._value)
  return _internal_mutable__value();
}

// repeated string _child = 8;
inline int BNode::_internal__child_size() const {
  return _child_.size();
}
inline int BNode::_child_size() const {
  return _internal__child_size();
}
inline void BNode::clear__child() {
  _child_.Clear();
}
inline std::string* BNode::add__child() {
  // @@protoc_insertion_point(field_add_mutable:bplustree.BNode._child)
  return _internal_add__child();
}
inline const std::string& BNode::_internal__child(int index) const {
  return _child_.Get(index);
}
inline const std::string& BNode::_child(int index) const {
  // @@protoc_insertion_point(field_get:bplustree.BNode._child)
  return _internal__child(index);
}
inline std::string* BNode::mutable__child(int index) {
  // @@protoc_insertion_point(field_mutable:bplustree.BNode._child)
  return _child_.Mutable(index);
}
inline void BNode::set__child(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:bplustree.BNode._child)
  _child_.Mutable(index)->assign(value);
}
inline void BNode::set__child(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:bplustree.BNode._child)
  _child_.Mutable(index)->assign(std::move(value));
}
inline void BNode::set__child(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _child_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bplustree.BNode._child)
}
inline void BNode::set__child(int index, const char* value, size_t size) {
  _child_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bplustree.BNode._child)
}
inline std::string* BNode::_internal_add__child() {
  return _child_.Add();
}
inline void BNode::add__child(const std::string& value) {
  _child_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bplustree.BNode._child)
}
inline void BNode::add__child(std::string&& value) {
  _child_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bplustree.BNode._child)
}
inline void BNode::add__child(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _child_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bplustree.BNode._child)
}
inline void BNode::add__child(const char* value, size_t size) {
  _child_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bplustree.BNode._child)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BNode::_child() const {
  // @@protoc_insertion_point(field_list:bplustree.BNode._child)
  return _child_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BNode::mutable__child() {
  // @@protoc_insertion_point(field_mutable_list:bplustree.BNode._child)
  return &_child_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bplustree

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bplustree_2eproto

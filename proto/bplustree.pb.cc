// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bplustree.proto

#include "bplustree.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace bplustree {
class BPlusTreeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BPlusTree> _instance;
} _BPlusTree_default_instance_;
class BNodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BNode> _instance;
} _BNode_default_instance_;
}  // namespace bplustree
static void InitDefaultsscc_info_BNode_bplustree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bplustree::_BNode_default_instance_;
    new (ptr) ::bplustree::BNode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bplustree::BNode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BNode_bplustree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BNode_bplustree_2eproto}, {}};

static void InitDefaultsscc_info_BPlusTree_bplustree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bplustree::_BPlusTree_default_instance_;
    new (ptr) ::bplustree::BPlusTree();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bplustree::BPlusTree::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BPlusTree_bplustree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BPlusTree_bplustree_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bplustree_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bplustree_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bplustree_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bplustree_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::bplustree::BPlusTree, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bplustree::BPlusTree, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bplustree::BPlusTree, _max_size_),
  PROTOBUF_FIELD_OFFSET(::bplustree::BPlusTree, _name_),
  PROTOBUF_FIELD_OFFSET(::bplustree::BPlusTree, _root_),
  PROTOBUF_FIELD_OFFSET(::bplustree::BPlusTree, _head_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::bplustree::BNode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bplustree::BNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bplustree::BNode, _isleaf_),
  PROTOBUF_FIELD_OFFSET(::bplustree::BNode, _keynum_),
  PROTOBUF_FIELD_OFFSET(::bplustree::BNode, _prev_),
  PROTOBUF_FIELD_OFFSET(::bplustree::BNode, _next_),
  PROTOBUF_FIELD_OFFSET(::bplustree::BNode, _uuid_),
  PROTOBUF_FIELD_OFFSET(::bplustree::BNode, _key_),
  PROTOBUF_FIELD_OFFSET(::bplustree::BNode, _value_),
  PROTOBUF_FIELD_OFFSET(::bplustree::BNode, _child_),
  4,
  3,
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::bplustree::BPlusTree)},
  { 13, 26, sizeof(::bplustree::BNode)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bplustree::_BPlusTree_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bplustree::_BNode_default_instance_),
};

const char descriptor_table_protodef_bplustree_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017bplustree.proto\022\tbplustree\"\213\001\n\tBPlusTr"
  "ee\022\026\n\t_MAX_SIZE\030\001 \001(\004H\000\210\001\001\022\022\n\005_name\030\002 \001("
  "\tH\001\210\001\001\022\022\n\005_root\030\003 \001(\tH\002\210\001\001\022\022\n\005_head\030\004 \001("
  "\tH\003\210\001\001B\014\n\nX_MAX_SIZEB\010\n\006X_nameB\010\n\006X_root"
  "B\010\n\006X_head\"\323\001\n\005BNode\022\024\n\007_isLeaf\030\001 \001(\010H\000\210"
  "\001\001\022\024\n\007_keyNum\030\002 \001(\004H\001\210\001\001\022\022\n\005_prev\030\003 \001(\tH"
  "\002\210\001\001\022\022\n\005_next\030\004 \001(\tH\003\210\001\001\022\022\n\005_uuid\030\005 \001(\tH"
  "\004\210\001\001\022\014\n\004_key\030\006 \003(\005\022\016\n\006_value\030\007 \003(\004\022\016\n\006_c"
  "hild\030\010 \003(\tB\n\n\010X_isLeafB\n\n\010X_keyNumB\010\n\006X_"
  "prevB\010\n\006X_nextB\010\n\006X_uuidb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bplustree_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bplustree_2eproto_sccs[2] = {
  &scc_info_BNode_bplustree_2eproto.base,
  &scc_info_BPlusTree_bplustree_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bplustree_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bplustree_2eproto = {
  false, false, descriptor_table_protodef_bplustree_2eproto, "bplustree.proto", 392,
  &descriptor_table_bplustree_2eproto_once, descriptor_table_bplustree_2eproto_sccs, descriptor_table_bplustree_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_bplustree_2eproto::offsets,
  file_level_metadata_bplustree_2eproto, 2, file_level_enum_descriptors_bplustree_2eproto, file_level_service_descriptors_bplustree_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bplustree_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bplustree_2eproto)), true);
namespace bplustree {

// ===================================================================

void BPlusTree::InitAsDefaultInstance() {
}
class BPlusTree::_Internal {
 public:
  using HasBits = decltype(std::declval<BPlusTree>()._has_bits_);
  static void set_has__max_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has__name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has__root(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has__head(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

BPlusTree::BPlusTree(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bplustree.BPlusTree)
}
BPlusTree::BPlusTree(const BPlusTree& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has__name()) {
    _name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal__name(),
      GetArena());
  }
  _root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has__root()) {
    _root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal__root(),
      GetArena());
  }
  _head_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has__head()) {
    _head_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal__head(),
      GetArena());
  }
  _max_size_ = from._max_size_;
  // @@protoc_insertion_point(copy_constructor:bplustree.BPlusTree)
}

void BPlusTree::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BPlusTree_bplustree_2eproto.base);
  _name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _head_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _max_size_ = PROTOBUF_ULONGLONG(0);
}

BPlusTree::~BPlusTree() {
  // @@protoc_insertion_point(destructor:bplustree.BPlusTree)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BPlusTree::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  _name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _head_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BPlusTree::ArenaDtor(void* object) {
  BPlusTree* _this = reinterpret_cast< BPlusTree* >(object);
  (void)_this;
}
void BPlusTree::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BPlusTree::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BPlusTree& BPlusTree::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BPlusTree_bplustree_2eproto.base);
  return *internal_default_instance();
}


void BPlusTree::Clear() {
// @@protoc_insertion_point(message_clear_start:bplustree.BPlusTree)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _root_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _head_.ClearNonDefaultToEmpty();
    }
  }
  _max_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BPlusTree::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 _MAX_SIZE = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has__max_size(&has_bits);
          _max_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string _name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable__name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bplustree.BPlusTree._name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string _root = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable__root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bplustree.BPlusTree._root"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string _head = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable__head();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bplustree.BPlusTree._head"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BPlusTree::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bplustree.BPlusTree)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 _MAX_SIZE = 1;
  if (_internal_has__max_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal__max_size(), target);
  }

  // string _name = 2;
  if (_internal_has__name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal__name().data(), static_cast<int>(this->_internal__name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bplustree.BPlusTree._name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal__name(), target);
  }

  // string _root = 3;
  if (_internal_has__root()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal__root().data(), static_cast<int>(this->_internal__root().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bplustree.BPlusTree._root");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal__root(), target);
  }

  // string _head = 4;
  if (_internal_has__head()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal__head().data(), static_cast<int>(this->_internal__head().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bplustree.BPlusTree._head");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal__head(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bplustree.BPlusTree)
  return target;
}

size_t BPlusTree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bplustree.BPlusTree)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // string _name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal__name());
    }

    // string _root = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal__root());
    }

    // string _head = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal__head());
    }

    // uint64 _MAX_SIZE = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal__max_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BPlusTree::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bplustree.BPlusTree)
  GOOGLE_DCHECK_NE(&from, this);
  const BPlusTree* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BPlusTree>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bplustree.BPlusTree)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bplustree.BPlusTree)
    MergeFrom(*source);
  }
}

void BPlusTree::MergeFrom(const BPlusTree& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bplustree.BPlusTree)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set__name(from._internal__name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set__root(from._internal__root());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set__head(from._internal__head());
    }
    if (cached_has_bits & 0x00000008u) {
      _max_size_ = from._max_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BPlusTree::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bplustree.BPlusTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BPlusTree::CopyFrom(const BPlusTree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bplustree.BPlusTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BPlusTree::IsInitialized() const {
  return true;
}

void BPlusTree::InternalSwap(BPlusTree* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _name_.Swap(&other->_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _root_.Swap(&other->_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _head_.Swap(&other->_head_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(_max_size_, other->_max_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BPlusTree::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BNode::InitAsDefaultInstance() {
}
class BNode::_Internal {
 public:
  using HasBits = decltype(std::declval<BNode>()._has_bits_);
  static void set_has__isleaf(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has__keynum(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has__prev(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has__next(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has__uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

BNode::BNode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  _key_(arena),
  _value_(arena),
  _child_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bplustree.BNode)
}
BNode::BNode(const BNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      _key_(from._key_),
      _value_(from._value_),
      _child_(from._child_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _prev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has__prev()) {
    _prev_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal__prev(),
      GetArena());
  }
  _next_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has__next()) {
    _next_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal__next(),
      GetArena());
  }
  _uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has__uuid()) {
    _uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal__uuid(),
      GetArena());
  }
  ::memcpy(&_keynum_, &from._keynum_,
    static_cast<size_t>(reinterpret_cast<char*>(&_isleaf_) -
    reinterpret_cast<char*>(&_keynum_)) + sizeof(_isleaf_));
  // @@protoc_insertion_point(copy_constructor:bplustree.BNode)
}

void BNode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BNode_bplustree_2eproto.base);
  _prev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _next_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&_keynum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_isleaf_) -
      reinterpret_cast<char*>(&_keynum_)) + sizeof(_isleaf_));
}

BNode::~BNode() {
  // @@protoc_insertion_point(destructor:bplustree.BNode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BNode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  _prev_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _next_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BNode::ArenaDtor(void* object) {
  BNode* _this = reinterpret_cast< BNode* >(object);
  (void)_this;
}
void BNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BNode& BNode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BNode_bplustree_2eproto.base);
  return *internal_default_instance();
}


void BNode::Clear() {
// @@protoc_insertion_point(message_clear_start:bplustree.BNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _key_.Clear();
  _value_.Clear();
  _child_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _prev_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _next_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _uuid_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_keynum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_isleaf_) -
        reinterpret_cast<char*>(&_keynum_)) + sizeof(_isleaf_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool _isLeaf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has__isleaf(&has_bits);
          _isleaf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 _keyNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has__keynum(&has_bits);
          _keynum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string _prev = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable__prev();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bplustree.BNode._prev"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string _next = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable__next();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bplustree.BNode._next"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string _uuid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable__uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bplustree.BNode._uuid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 _key = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable__key(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add__key(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 _value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable__value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add__value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string _child = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add__child();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bplustree.BNode._child"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bplustree.BNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool _isLeaf = 1;
  if (_internal_has__isleaf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal__isleaf(), target);
  }

  // uint64 _keyNum = 2;
  if (_internal_has__keynum()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal__keynum(), target);
  }

  // string _prev = 3;
  if (_internal_has__prev()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal__prev().data(), static_cast<int>(this->_internal__prev().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bplustree.BNode._prev");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal__prev(), target);
  }

  // string _next = 4;
  if (_internal_has__next()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal__next().data(), static_cast<int>(this->_internal__next().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bplustree.BNode._next");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal__next(), target);
  }

  // string _uuid = 5;
  if (_internal_has__uuid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal__uuid().data(), static_cast<int>(this->_internal__uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bplustree.BNode._uuid");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal__uuid(), target);
  }

  // repeated int32 _key = 6;
  {
    int byte_size = __key_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal__key(), byte_size, target);
    }
  }

  // repeated uint64 _value = 7;
  {
    int byte_size = __value_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          7, _internal__value(), byte_size, target);
    }
  }

  // repeated string _child = 8;
  for (int i = 0, n = this->_internal__child_size(); i < n; i++) {
    const auto& s = this->_internal__child(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bplustree.BNode._child");
    target = stream->WriteString(8, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bplustree.BNode)
  return target;
}

size_t BNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bplustree.BNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 _key = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->_key_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    __key_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 _value = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->_value_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    __value_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string _child = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_child_.size());
  for (int i = 0, n = _child_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _child_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // string _prev = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal__prev());
    }

    // string _next = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal__next());
    }

    // string _uuid = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal__uuid());
    }

    // uint64 _keyNum = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal__keynum());
    }

    // bool _isLeaf = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bplustree.BNode)
  GOOGLE_DCHECK_NE(&from, this);
  const BNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bplustree.BNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bplustree.BNode)
    MergeFrom(*source);
  }
}

void BNode::MergeFrom(const BNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bplustree.BNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _key_.MergeFrom(from._key_);
  _value_.MergeFrom(from._value_);
  _child_.MergeFrom(from._child_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set__prev(from._internal__prev());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set__next(from._internal__next());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set__uuid(from._internal__uuid());
    }
    if (cached_has_bits & 0x00000008u) {
      _keynum_ = from._keynum_;
    }
    if (cached_has_bits & 0x00000010u) {
      _isleaf_ = from._isleaf_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bplustree.BNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BNode::CopyFrom(const BNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bplustree.BNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BNode::IsInitialized() const {
  return true;
}

void BNode::InternalSwap(BNode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _key_.InternalSwap(&other->_key_);
  _value_.InternalSwap(&other->_value_);
  _child_.InternalSwap(&other->_child_);
  _prev_.Swap(&other->_prev_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _next_.Swap(&other->_next_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _uuid_.Swap(&other->_uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BNode, _isleaf_)
      + sizeof(BNode::_isleaf_)
      - PROTOBUF_FIELD_OFFSET(BNode, _keynum_)>(
          reinterpret_cast<char*>(&_keynum_),
          reinterpret_cast<char*>(&other->_keynum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BNode::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bplustree
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bplustree::BPlusTree* Arena::CreateMaybeMessage< ::bplustree::BPlusTree >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bplustree::BPlusTree >(arena);
}
template<> PROTOBUF_NOINLINE ::bplustree::BNode* Arena::CreateMaybeMessage< ::bplustree::BNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bplustree::BNode >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
